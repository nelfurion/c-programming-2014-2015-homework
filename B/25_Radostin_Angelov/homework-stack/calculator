#include <stdio.h>
#include <stdlib.h>


typedef struct {
    int size, top;
    double * data;
} stack_t;

void stack_init(stack_t * s)
{
    s->size = 20;
    s->top = 0;
    s->data = (double*) malloc(s->size * sizeof(double));
}
void stack_push(stack_t* s, double value)
{
    if(s->top < s->size)
    {
        s->data[s->top] = value;
        s->top++;
    }
    else
    {
        printf("Can't push %f. Stack is full...\n", value);
    }
}
double stack_pop(stack_t * s)
{
    if(s->top - 1 >= 0)
    {
        return s->data[--s->top];
    }
    else
    {
        printf("Can't pop. Stack is empty...\n");
        return -1;
    }
}
void stack_destroy(stack_t * s)
{
    free(s->data);
    s->size = 0;
    s->top = 0;
}
double stack_peek(stack_t * s)
{
    if(s->top - 1 >= 0)
    {
        return s->data[s->top - 1];
    }
    else
    {
        printf("Can't peek. Stack is empty...\n");
    }
    return -1;
}

int calc_and_push(stack_t * s, char operand)
{
    double nextNum, result = 0;
    if(s->top < 1 && operand != '-')
    {
        return -1;
    }
    else if(s->top < 1 && operand == '-')
    {
        result = stack_pop(&s) * -1;
        stack_push(&s, result);
    }
    else
    {
        if(s->top >= 1)
        {
            double numbers[s->top];
            int i = s->top - 1;
            for(i; i >= 0; i--)
            {
                numbers[i] = stack_pop(&s);
            }
            result = numbers[0];
            for(i = 1; i < s->top; i++)
            {
                switch(operand)
                {
                case '+':
                    result += numbers[i];
                    break;
                case '-':
                    result -= numbers[i];
                    break;
                case '*':
                    result *= numbers[i];
                    break;
                case '/':
                    result /= numbers[i];
                    break;
                }
            }
            stack_push(&s, result);
        }
    }

}

int main()
{
    stack_t mystack;
    stack_init(&mystack);
    char op[10];
    while(op != '\0')
    {
        scanf("%s", &op);
        if(op[0] == '-')
        {
            calc_and_push(&mystack, '-');
        }
        else if (op[0] == '+')
        {
            calc_and_push(&mystack, '+');
        }
        else if (op[0] == '*')
        {
            calc_and_push(&mystack, '*');
        }
        else if (op[0] == '/')
        {
            calc_and_push(&mystack, '/');
        }
        else
        {
            stack_push(&mystack, atoi(op));
        }
    }
    printf("%f\n", stack_pop(&mystack));
    return 0;
}
